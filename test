<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test API Voiceflow</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .test-section {
            margin-bottom: 30px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .test-section h3 {
            color: #333;
            margin-top: 0;
        }
        button {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            background: #0056b3;
        }
        .result {
            margin-top: 15px;
            padding: 10px;
            border-radius: 5px;
            font-family: monospace;
            white-space: pre-wrap;
        }
        .success {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        .error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        input, select {
            padding: 8px;
            margin: 5px;
            border: 1px solid #ddd;
            border-radius: 3px;
            width: 200px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üß™ Testeur API Voiceflow - Adalo</h1>
        <p><strong>URL Backend:</strong> <span id="backend-url">https://voiceflow-widget.vercel.app</span></p>
        
        <!-- Test 1: Initialisation -->
        <div class="test-section">
            <h3>‚úÖ Test 1: Initialisation Session</h3>
            <p>Ce test initialise une session avec un agent sp√©cifique.</p>
            
            <label>Agent ID:</label>
            <select id="init-agent">
                <option value="1-1">Semaine 1 - Agent 1</option>
                <option value="1-2">Semaine 1 - Agent 2</option>
                <option value="1-3">Semaine 1 - Agent 3</option>
                <option value="2-1">Semaine 2 - Agent 1</option>
                <option value="2-2">Semaine 2 - Agent 2</option>
            </select>
            
            <button onclick="testInit()">üöÄ Tester Initialisation</button>
            <div id="init-result" class="result" style="display: none;"></div>
        </div>

        <!-- Test 2: Chat -->
        <div class="test-section">
            <h3>üí¨ Test 2: Envoi Message</h3>
            <p>Ce test envoie un message √† l'agent et r√©cup√®re la r√©ponse.</p>
            
            <label>Agent ID:</label>
            <select id="chat-agent">
                <option value="1-1">Semaine 1 - Agent 1</option>
                <option value="1-2">Semaine 1 - Agent 2</option>
                <option value="1-3">Semaine 1 - Agent 3</option>
                <option value="2-1">Semaine 2 - Agent 1</option>
                <option value="2-2">Semaine 2 - Agent 2</option>
            </select>
            
            <label>Message:</label>
            <input type="text" id="chat-message" value="Bonjour, comment allez-vous ?" placeholder="Tapez votre message...">
            
            <label>User ID:</label>
            <input type="text" id="chat-user" value="test-user-123" placeholder="ID utilisateur (optionnel)">
            
            <button onclick="testChat()">üì§ Envoyer Message</button>
            <div id="chat-result" class="result" style="display: none;"></div>
        </div>

        <!-- Test 3: Conversation compl√®te -->
        <div class="test-section">
            <h3>üîÑ Test 3: Conversation Compl√®te</h3>
            <p>Ce test simule une conversation compl√®te : init + plusieurs messages.</p>
            
            <label>Agent ID:</label>
            <select id="conv-agent">
                <option value="1-3">Semaine 1 - Agent 3</option>
                <option value="2-1">Semaine 2 - Agent 1</option>
            </select>
            
            <button onclick="testFullConversation()">üó£Ô∏è Tester Conversation</button>
            <div id="conv-result" class="result" style="display: none;"></div>
        </div>
    </div>

    <script>
        const BACKEND_URL = 'https://voiceflow-widget.vercel.app';
        
        // Test 1: Initialisation
        async function testInit() {
            const resultDiv = document.getElementById('init-result');
            const agentId = document.getElementById('init-agent').value;
            
            resultDiv.style.display = 'block';
            resultDiv.className = 'result';
            resultDiv.textContent = '‚è≥ Test en cours...';
            
            try {
                const response = await fetch(`${BACKEND_URL}/api/init`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        agent_id: agentId
                    })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    resultDiv.className = 'result success';
                    resultDiv.textContent = `‚úÖ SUCC√àS!\n\nAgent: ${data.agent_name}\nUser ID: ${data.user_id}\nMessage d'accueil: ${data.welcome_message}\n\nR√©ponse compl√®te:\n${JSON.stringify(data, null, 2)}`;
                } else {
                    resultDiv.className = 'result error';
                    resultDiv.textContent = `‚ùå ERREUR!\n\nStatut: ${response.status}\n\n${JSON.stringify(data, null, 2)}`;
                }
            } catch (error) {
                resultDiv.className = 'result error';
                resultDiv.textContent = `‚ùå ERREUR R√âSEAU!\n\n${error.message}\n\nV√©rifiez que votre backend est d√©ploy√© et accessible.`;
            }
        }
        
        // Test 2: Chat
        async function testChat() {
            const resultDiv = document.getElementById('chat-result');
            const agentId = document.getElementById('chat-agent').value;
            const message = document.getElementById('chat-message').value;
            const userId = document.getElementById('chat-user').value;
            
            resultDiv.style.display = 'block';
            resultDiv.className = 'result';
            resultDiv.textContent = '‚è≥ Envoi du message...';
            
            try {
                const response = await fetch(`${BACKEND_URL}/api/chat`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message: message,
                        agent_id: agentId,
                        user_id: userId
                    })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    resultDiv.className = 'result success';
                    resultDiv.textContent = `‚úÖ MESSAGE ENVOY√â!\n\nüë§ Vous: ${message}\nü§ñ ${data.agent_name}: ${data.response}\n\nD√©tails:\nUser ID: ${data.user_id}\nTimestamp: ${data.timestamp}\n\nR√©ponse compl√®te:\n${JSON.stringify(data, null, 2)}`;
                } else {
                    resultDiv.className = 'result error';
                    resultDiv.textContent = `‚ùå ERREUR!\n\nStatut: ${response.status}\n\n${JSON.stringify(data, null, 2)}`;
                }
            } catch (error) {
                resultDiv.className = 'result error';
                resultDiv.textContent = `‚ùå ERREUR R√âSEAU!\n\n${error.message}`;
            }
        }
        
        // Test 3: Conversation compl√®te
        async function testFullConversation() {
            const resultDiv = document.getElementById('conv-result');
            const agentId = document.getElementById('conv-agent').value;
            
            resultDiv.style.display = 'block';
            resultDiv.className = 'result';
            resultDiv.textContent = '‚è≥ D√©marrage de la conversation...';
            
            try {
                let conversation = 'üó£Ô∏è CONVERSATION COMPL√àTE:\n\n';
                
                // 1. Initialisation
                conversation += '1Ô∏è‚É£ Initialisation...\n';
                const initResponse = await fetch(`${BACKEND_URL}/api/init`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ agent_id: agentId })
                });
                
                const initData = await initResponse.json();
                if (!initData.success) throw new Error('√âchec initialisation');
                
                conversation += `ü§ñ ${initData.agent_name}: ${initData.welcome_message}\n\n`;
                
                // 2. Premier message
                conversation += '2Ô∏è‚É£ Premier message...\n';
                const msg1Response = await fetch(`${BACKEND_URL}/api/chat`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        message: "Bonjour !",
                        agent_id: agentId,
                        user_id: initData.user_id
                    })
                });
                
                const msg1Data = await msg1Response.json();
                if (!msg1Data.success) throw new Error('√âchec message 1');
                
                conversation += `üë§ Vous: Bonjour !\nü§ñ ${msg1Data.agent_name}: ${msg1Data.response}\n\n`;
                
                // 3. Deuxi√®me message
                conversation += '3Ô∏è‚É£ Deuxi√®me message...\n';
                const msg2Response = await fetch(`${BACKEND_URL}/api/chat`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        message: "Pouvez-vous m'aider ?",
                        agent_id: agentId,
                        user_id: initData.user_id
                    })
                });
                
                const msg2Data = await msg2Response.json();
                if (!msg2Data.success) throw new Error('√âchec message 2');
                
                conversation += `üë§ Vous: Pouvez-vous m'aider ?\nü§ñ ${msg2Data.agent_name}: ${msg2Data.response}\n\n`;
                
                conversation += '‚úÖ CONVERSATION R√âUSSIE ! Votre API fonctionne parfaitement.';
                
                resultDiv.className = 'result success';
                resultDiv.textContent = conversation;
                
            } catch (error) {
                resultDiv.className = 'result error';
                resultDiv.textContent = `‚ùå ERREUR CONVERSATION!\n\n${error.message}`;
            }
        }
        
        // Afficher l'URL du backend
        document.getElementById('backend-url').textContent = BACKEND_URL;
    </script>
</body>
</html>
